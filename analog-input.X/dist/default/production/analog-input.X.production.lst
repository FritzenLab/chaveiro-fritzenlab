

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Sun Jan 19 18:38:35 2025

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	12F675
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x5E,2
    17     0000                     
    18                           ; Generated 17/08/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC12F675 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0000                     	;# 
    53     0001                     	;# 
    54     0002                     	;# 
    55     0003                     	;# 
    56     0004                     	;# 
    57     0005                     	;# 
    58     000A                     	;# 
    59     000B                     	;# 
    60     000C                     	;# 
    61     000E                     	;# 
    62     000E                     	;# 
    63     000F                     	;# 
    64     0010                     	;# 
    65     0019                     	;# 
    66     001E                     	;# 
    67     001F                     	;# 
    68     0081                     	;# 
    69     0085                     	;# 
    70     008C                     	;# 
    71     008E                     	;# 
    72     0090                     	;# 
    73     0095                     	;# 
    74     0096                     	;# 
    75     0096                     	;# 
    76     0099                     	;# 
    77     009A                     	;# 
    78     009A                     	;# 
    79     009B                     	;# 
    80     009C                     	;# 
    81     009D                     	;# 
    82     009E                     	;# 
    83     009F                     	;# 
    84     0000                     	;# 
    85     0001                     	;# 
    86     0002                     	;# 
    87     0003                     	;# 
    88     0004                     	;# 
    89     0005                     	;# 
    90     000A                     	;# 
    91     000B                     	;# 
    92     000C                     	;# 
    93     000E                     	;# 
    94     000E                     	;# 
    95     000F                     	;# 
    96     0010                     	;# 
    97     0019                     	;# 
    98     001E                     	;# 
    99     001F                     	;# 
   100     0081                     	;# 
   101     0085                     	;# 
   102     008C                     	;# 
   103     008E                     	;# 
   104     0090                     	;# 
   105     0095                     	;# 
   106     0096                     	;# 
   107     0096                     	;# 
   108     0099                     	;# 
   109     009A                     	;# 
   110     009A                     	;# 
   111     009B                     	;# 
   112     009C                     	;# 
   113     009D                     	;# 
   114     009E                     	;# 
   115     009F                     	;# 
   116                           
   117                           	psect	idataBANK0
   118     01CD                     __pidataBANK0:
   119                           
   120                           ;initializer for _readAndDecide
   121     01CD  3401               	retlw	1
   122     000B                     _INTCON	set	11
   123     001F                     _ADCON0	set	31
   124     0019                     _CMCON	set	25
   125     0001                     _TMR0	set	1
   126     001E                     _ADRESH	set	30
   127     00F8                     _ADON	set	248
   128     005A                     _TMR0IF	set	90
   129     0028                     _GP0	set	40
   130     0029                     _GP1	set	41
   131     00F9                     _GO_nDONE	set	249
   132     0081                     _OPTION_REG	set	129
   133     0090                     _OSCCAL	set	144
   134     0095                     _WPU	set	149
   135     009F                     _ANSEL	set	159
   136     0085                     _TRISIO	set	133
   137     009E                     _ADRESL	set	158
   138                           
   139                           	psect	cinit
   140     000E                     start_initialization:	
   141                           ; #config settings
   142                           
   143     000E                     __initialization:
   144                           
   145                           ; Initialize objects allocated to BANK0
   146     000E  21CD               	fcall	__pidataBANK0	;fetch initializer
   147     000F  00BE               	movwf	__pdataBANK0& (0+127)
   148                           
   149                           ; Clear objects allocated to BANK0
   150     0010  01B3               	clrf	__pbssBANK0& (0+127)
   151     0011  01B4               	clrf	(__pbssBANK0+1)& (0+127)
   152     0012  01B5               	clrf	(__pbssBANK0+2)& (0+127)
   153     0013  01B6               	clrf	(__pbssBANK0+3)& (0+127)
   154     0014  01B7               	clrf	(__pbssBANK0+4)& (0+127)
   155     0015  01B8               	clrf	(__pbssBANK0+5)& (0+127)
   156     0016  01B9               	clrf	(__pbssBANK0+6)& (0+127)
   157     0017  01BA               	clrf	(__pbssBANK0+7)& (0+127)
   158     0018  01BB               	clrf	(__pbssBANK0+8)& (0+127)
   159     0019  01BC               	clrf	(__pbssBANK0+9)& (0+127)
   160     001A  01BD               	clrf	(__pbssBANK0+10)& (0+127)
   161     001B                     end_of_initialization:	
   162                           ;End of C runtime variable initialization code
   163                           
   164     001B                     __end_of__initialization:
   165     001B  0183               	clrf	3
   166     001C  29B3               	ljmp	_main	;jump to C main() function
   167                           
   168                           	psect	bssBANK0
   169     0033                     __pbssBANK0:
   170     0033                     _units:
   171     0033                     	ds	2
   172     0035                     _tens:
   173     0035                     	ds	2
   174     0037                     _voltage:
   175     0037                     	ds	2
   176     0039                     _executeUnits:
   177     0039                     	ds	1
   178     003A                     _executeTens:
   179     003A                     	ds	1
   180     003B                     _counter:
   181     003B                     	ds	1
   182     003C                     _reading:
   183     003C                     	ds	2
   184                           
   185                           	psect	dataBANK0
   186     003E                     __pdataBANK0:
   187     003E                     _readAndDecide:
   188     003E                     	ds	1
   189                           
   190                           	psect	cstackCOMMON
   191     0000                     __pcstackCOMMON:
   192     0000                     ??_main:
   193     0000                     ??___wmul:	
   194                           ; 1 bytes @ 0x0
   195                           
   196     0000                     ??___awdiv:	
   197                           ; 1 bytes @ 0x0
   198                           
   199                           
   200                           	psect	cstackBANK0
   201     0020                     __pcstackBANK0:	
   202                           ; 1 bytes @ 0x0
   203                           
   204     0020                     ?_isr:
   205     0020                     ?_main:	
   206                           ; 1 bytes @ 0x0
   207                           
   208     0020                     ?___wmul:	
   209                           ; 1 bytes @ 0x0
   210                           
   211     0020                     ___wmul@multiplier:	
   212                           ; 2 bytes @ 0x0
   213                           
   214                           
   215                           ; 2 bytes @ 0x0
   216     0020                     	ds	2
   217     0022                     ___wmul@multiplicand:
   218                           
   219                           ; 2 bytes @ 0x2
   220     0022                     	ds	2
   221     0024                     ___wmul@product:
   222                           
   223                           ; 2 bytes @ 0x4
   224     0024                     	ds	2
   225     0026                     ?___awdiv:
   226     0026                     ___awdiv@divisor:	
   227                           ; 2 bytes @ 0x6
   228                           
   229                           
   230                           ; 2 bytes @ 0x6
   231     0026                     	ds	2
   232     0028                     ___awdiv@dividend:
   233                           
   234                           ; 2 bytes @ 0x8
   235     0028                     	ds	2
   236     002A                     ___awdiv@counter:
   237                           
   238                           ; 1 bytes @ 0xA
   239     002A                     	ds	1
   240     002B                     ___awdiv@sign:
   241                           
   242                           ; 1 bytes @ 0xB
   243     002B                     	ds	1
   244     002C                     ___awdiv@quotient:
   245                           
   246                           ; 2 bytes @ 0xC
   247     002C                     	ds	2
   248     002E                     ??_isr:
   249                           
   250                           ; 1 bytes @ 0xE
   251     002E                     	ds	3
   252     0031                     _isr$653:
   253                           
   254                           ; 2 bytes @ 0x11
   255     0031                     	ds	2
   256                           
   257                           	psect	maintext
   258     01B3                     __pmaintext:	
   259 ;;
   260 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   261 ;;
   262 ;; *************** function _main *****************
   263 ;; Defined at:
   264 ;;		line 110 in file "main.c"
   265 ;; Parameters:    Size  Location     Type
   266 ;;		None
   267 ;; Auto vars:     Size  Location     Type
   268 ;;		None
   269 ;; Return value:  Size  Location     Type
   270 ;;                  1    wreg      void 
   271 ;; Registers used:
   272 ;;		wreg, status,2
   273 ;; Tracked objects:
   274 ;;		On entry : B00/0
   275 ;;		On exit  : 0/0
   276 ;;		Unchanged: 0/0
   277 ;; Data sizes:     COMMON   BANK0
   278 ;;      Params:         0       0
   279 ;;      Locals:         0       0
   280 ;;      Temps:          0       0
   281 ;;      Totals:         0       0
   282 ;;Total ram usage:        0 bytes
   283 ;; Hardware stack levels required when called: 2
   284 ;; This function calls:
   285 ;;		Nothing
   286 ;; This function is called by:
   287 ;;		Startup code after reset
   288 ;; This function uses a non-reentrant model
   289 ;;
   290                           
   291     01B3                     _main:	
   292                           ;psect for function _main
   293                           
   294     01B3                     l932:	
   295                           ;incstack = 0
   296                           ; Regs used in _main: [wreg+status,2]
   297                           
   298     01B3  3014               	movlw	20
   299     01B4  1683               	bsf	3,5	;RP0=1, select bank1
   300     01B5  0085               	movwf	5	;volatile
   301     01B6  3007               	movlw	7
   302     01B7  1283               	bcf	3,5	;RP0=0, select bank0
   303     01B8  0099               	movwf	25	;volatile
   304     01B9  301C               	movlw	28
   305     01BA  1683               	bsf	3,5	;RP0=1, select bank1
   306     01BB  009F               	movwf	31	;volatile
   307     01BC  3089               	movlw	137
   308     01BD  1283               	bcf	3,5	;RP0=0, select bank0
   309     01BE  009F               	movwf	31	;volatile
   310     01BF                     l934:
   311     01BF  141F               	bsf	31,0	;volatile
   312     01C0                     l936:
   313     01C0  1683               	bsf	3,5	;RP0=1, select bank1
   314     01C1  0195               	clrf	21	;volatile
   315     01C2                     l938:
   316     01C2  1283               	bcf	3,5	;RP0=0, select bank0
   317     01C3  0181               	clrf	1	;volatile
   318     01C4  30FF               	movlw	255
   319     01C5  1683               	bsf	3,5	;RP0=1, select bank1
   320     01C6  0090               	movwf	16	;volatile
   321     01C7  3087               	movlw	135
   322     01C8  0081               	movwf	1	;volatile
   323     01C9  30E0               	movlw	224
   324     01CA  008B               	movwf	11	;volatile
   325     01CB                     l81:
   326     01CB                     l82:
   327     01CB  29CB               	goto	l81
   328     01CC  280D               	ljmp	start
   329     01CD                     __end_of_main:
   330                           
   331                           	psect	text1
   332     001D                     __ptext1:	
   333 ;; *************** function _isr *****************
   334 ;; Defined at:
   335 ;;		line 33 in file "main.c"
   336 ;; Parameters:    Size  Location     Type
   337 ;;		None
   338 ;; Auto vars:     Size  Location     Type
   339 ;;		None
   340 ;; Return value:  Size  Location     Type
   341 ;;                  1    wreg      void 
   342 ;; Registers used:
   343 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   344 ;; Tracked objects:
   345 ;;		On entry : 0/0
   346 ;;		On exit  : 0/0
   347 ;;		Unchanged: 0/0
   348 ;; Data sizes:     COMMON   BANK0
   349 ;;      Params:         0       0
   350 ;;      Locals:         0       2
   351 ;;      Temps:          0       3
   352 ;;      Totals:         0       5
   353 ;;Total ram usage:        5 bytes
   354 ;; Hardware stack levels used: 1
   355 ;; Hardware stack levels required when called: 1
   356 ;; This function calls:
   357 ;;		___awdiv
   358 ;;		___wmul
   359 ;; This function is called by:
   360 ;;		Interrupt level 1
   361 ;; This function uses a non-reentrant model
   362 ;;
   363                           
   364     001D                     _isr:	
   365                           ;psect for function _isr
   366                           
   367     001D                     i1l842:
   368                           
   369                           ;main.c: 35:             }else if(voltage >= 20){
   370     001D  3001               	movlw	1
   371     001E  00DF               	movwf	btemp+1
   372     001F  085F               	movf	btemp+1,w
   373     0020  07BB               	addwf	_counter,f	;volatile
   374     0021                     i1l844:
   375                           
   376                           ;main.c: 36:                 tens= 2;
   377     0021  3004               	movlw	4
   378     0022  063B               	xorwf	_counter,w	;volatile
   379     0023  1D03               	btfss	3,2
   380     0024  2826               	goto	u42_21
   381     0025  2827               	goto	u42_20
   382     0026                     u42_21:
   383     0026  291A               	goto	i1l928
   384     0027                     u42_20:
   385     0027                     i1l846:
   386                           
   387                           ;main.c: 37:                 units= voltage - 20;
   388     0027  01BB               	clrf	_counter	;volatile
   389     0028                     i1l848:
   390                           
   391                           ;main.c: 39:                 tens= 1;
   392     0028  033E               	decf	_readAndDecide,w	;volatile
   393     0029  1D03               	btfss	3,2
   394     002A  282C               	goto	u43_21
   395     002B  282D               	goto	u43_20
   396     002C                     u43_21:
   397     002C  28CF               	goto	i1l896
   398     002D                     u43_20:
   399     002D                     i1l850:
   400                           
   401                           ;main.c: 40:                 units= voltage - 10;
   402     002D  01BE               	clrf	_readAndDecide	;volatile
   403     002E                     i1l852:
   404                           
   405                           ;main.c: 41:             }else{
   406     002E  3001               	movlw	1
   407     002F  00BA               	movwf	_executeTens	;volatile
   408     0030                     i1l854:
   409                           
   410                           ;main.c: 42:                 tens= 0;
   411     0030  01B9               	clrf	_executeUnits	;volatile
   412     0031                     i1l856:
   413                           
   414                           ;main.c: 44:             }
   415     0031  149F               	bsf	31,1	;volatile
   416     0032                     i1l55:	
   417                           ;main.c: 45:             tens= tens * 2;
   418                           
   419     0032  189F               	btfsc	31,1	;volatile
   420     0033  2835               	goto	u44_21
   421     0034  2836               	goto	u44_20
   422     0035                     u44_21:
   423     0035  2832               	goto	i1l55
   424     0036                     u44_20:
   425     0036                     i1l858:
   426                           
   427                           ;main.c: 46:             units= units * 2;
   428     0036  081E               	movf	30,w	;volatile
   429     0037  00BD               	movwf	_reading+1	;volatile
   430     0038  1683               	bsf	3,5	;RP0=1, select bank1
   431     0039  081E               	movf	30,w	;volatile
   432     003A  1283               	bcf	3,5	;RP0=0, select bank0
   433     003B  00BC               	movwf	_reading	;volatile
   434     003C                     i1l860:
   435                           
   436                           ;main.c: 49:             GP1= 0;
   437     003C  3000               	movlw	0
   438     003D  00A6               	movwf	___awdiv@divisor
   439     003E  3004               	movlw	4
   440     003F  00A7               	movwf	___awdiv@divisor+1
   441     0040  083D               	movf	_reading+1,w	;volatile
   442     0041  00A1               	movwf	___wmul@multiplier+1
   443     0042  083C               	movf	_reading,w	;volatile
   444     0043  00A0               	movwf	___wmul@multiplier
   445     0044  3005               	movlw	5
   446     0045  00A2               	movwf	___wmul@multiplicand
   447     0046  3000               	movlw	0
   448     0047  00A3               	movwf	___wmul@multiplicand+1
   449     0048  218D               	fcall	___wmul
   450     0049  1283               	bcf	3,5	;RP0=0, select bank0
   451     004A  0821               	movf	?___wmul+1,w
   452     004B  00A9               	movwf	___awdiv@dividend+1
   453     004C  0820               	movf	?___wmul,w
   454     004D  00A8               	movwf	___awdiv@dividend
   455     004E  2125               	fcall	___awdiv
   456     004F  1283               	bcf	3,5	;RP0=0, select bank0
   457     0050  0827               	movf	?___awdiv+1,w
   458     0051  00B2               	movwf	_isr$653+1
   459     0052  0826               	movf	?___awdiv,w
   460     0053  00B1               	movwf	_isr$653
   461     0054                     i1l862:
   462                           
   463                           ;main.c: 49:             GP1= 0;
   464     0054  0832               	movf	_isr$653+1,w
   465     0055  00A1               	movwf	___wmul@multiplier+1
   466     0056  0831               	movf	_isr$653,w
   467     0057  00A0               	movwf	___wmul@multiplier
   468     0058  30EC               	movlw	236
   469     0059  00A2               	movwf	___wmul@multiplicand
   470     005A  30FF               	movlw	255
   471     005B  00A3               	movwf	___wmul@multiplicand+1
   472     005C  218D               	fcall	___wmul
   473     005D  1283               	bcf	3,5	;RP0=0, select bank0
   474     005E  0820               	movf	?___wmul,w
   475     005F  3E4B               	addlw	75
   476     0060  00B7               	movwf	_voltage	;volatile
   477     0061  0821               	movf	?___wmul+1,w
   478     0062  1803               	skipnc
   479     0063  3E01               	addlw	1
   480     0064  3E00               	addlw	0
   481     0065  00B8               	movwf	_voltage+1	;volatile
   482     0066                     i1l864:
   483                           
   484                           ;main.c: 52:             }else{
   485     0066  3000               	movlw	0
   486     0067  0238               	subwf	_voltage+1,w	;volatile
   487     0068  3028               	movlw	40
   488     0069  1903               	skipnz
   489     006A  0237               	subwf	_voltage,w	;volatile
   490     006B  1C03               	skipc
   491     006C  286E               	goto	u45_21
   492     006D  286F               	goto	u45_20
   493     006E                     u45_21:
   494     006E  287C               	goto	i1l870
   495     006F                     u45_20:
   496     006F                     i1l866:
   497                           
   498                           ;main.c: 53:                 GP0= 1;
   499     006F  3004               	movlw	4
   500     0070  00B5               	movwf	_tens	;volatile
   501     0071  3000               	movlw	0
   502     0072  00B6               	movwf	_tens+1	;volatile
   503     0073                     i1l868:
   504                           
   505                           ;main.c: 54:             }
   506     0073  0837               	movf	_voltage,w	;volatile
   507     0074  3ED8               	addlw	216
   508     0075  00B3               	movwf	_units	;volatile
   509     0076  0838               	movf	_voltage+1,w	;volatile
   510     0077  1803               	skipnc
   511     0078  3E01               	addlw	1
   512     0079  3EFF               	addlw	255
   513     007A  00B4               	movwf	_units+1	;volatile
   514                           
   515                           ;main.c: 55:             if(tens < 1){
   516     007B  28C4               	goto	i1l892
   517     007C                     i1l870:
   518     007C  3000               	movlw	0
   519     007D  0238               	subwf	_voltage+1,w	;volatile
   520     007E  301E               	movlw	30
   521     007F  1903               	skipnz
   522     0080  0237               	subwf	_voltage,w	;volatile
   523     0081  1C03               	skipc
   524     0082  2884               	goto	u46_21
   525     0083  2885               	goto	u46_20
   526     0084                     u46_21:
   527     0084  2892               	goto	i1l876
   528     0085                     u46_20:
   529     0085                     i1l872:
   530                           
   531                           ;main.c: 56:                 executeTens= 0;
   532     0085  3003               	movlw	3
   533     0086  00B5               	movwf	_tens	;volatile
   534     0087  3000               	movlw	0
   535     0088  00B6               	movwf	_tens+1	;volatile
   536     0089                     i1l874:
   537                           
   538                           ;main.c: 57:                 executeUnits= 1;
   539     0089  0837               	movf	_voltage,w	;volatile
   540     008A  3EE2               	addlw	226
   541     008B  00B3               	movwf	_units	;volatile
   542     008C  0838               	movf	_voltage+1,w	;volatile
   543     008D  1803               	skipnc
   544     008E  3E01               	addlw	1
   545     008F  3EFF               	addlw	255
   546     0090  00B4               	movwf	_units+1	;volatile
   547                           
   548                           ;main.c: 58:             }
   549     0091  28C4               	goto	i1l892
   550     0092                     i1l876:
   551     0092  3000               	movlw	0
   552     0093  0238               	subwf	_voltage+1,w	;volatile
   553     0094  3014               	movlw	20
   554     0095  1903               	skipnz
   555     0096  0237               	subwf	_voltage,w	;volatile
   556     0097  1C03               	skipc
   557     0098  289A               	goto	u47_21
   558     0099  289B               	goto	u47_20
   559     009A                     u47_21:
   560     009A  28A8               	goto	i1l882
   561     009B                     u47_20:
   562     009B                     i1l878:
   563                           
   564                           ;main.c: 59: 
   565     009B  3002               	movlw	2
   566     009C  00B5               	movwf	_tens	;volatile
   567     009D  3000               	movlw	0
   568     009E  00B6               	movwf	_tens+1	;volatile
   569     009F                     i1l880:
   570                           
   571                           ;main.c: 60:         }else if(executeUnits == 1){
   572     009F  0837               	movf	_voltage,w	;volatile
   573     00A0  3EEC               	addlw	236
   574     00A1  00B3               	movwf	_units	;volatile
   575     00A2  0838               	movf	_voltage+1,w	;volatile
   576     00A3  1803               	skipnc
   577     00A4  3E01               	addlw	1
   578     00A5  3EFF               	addlw	255
   579     00A6  00B4               	movwf	_units+1	;volatile
   580                           
   581                           ;main.c: 61:             GP0= 0;
   582     00A7  28C4               	goto	i1l892
   583     00A8                     i1l882:
   584     00A8  3000               	movlw	0
   585     00A9  0238               	subwf	_voltage+1,w	;volatile
   586     00AA  300A               	movlw	10
   587     00AB  1903               	skipnz
   588     00AC  0237               	subwf	_voltage,w	;volatile
   589     00AD  1C03               	skipc
   590     00AE  28B0               	goto	u48_21
   591     00AF  28B1               	goto	u48_20
   592     00B0                     u48_21:
   593     00B0  28BE               	goto	i1l888
   594     00B1                     u48_20:
   595     00B1                     i1l884:
   596                           
   597                           ;main.c: 62:             units--;
   598     00B1  3001               	movlw	1
   599     00B2  00B5               	movwf	_tens	;volatile
   600     00B3  3000               	movlw	0
   601     00B4  00B6               	movwf	_tens+1	;volatile
   602     00B5                     i1l886:
   603                           
   604                           ;main.c: 63:             if(GP1){
   605     00B5  0837               	movf	_voltage,w	;volatile
   606     00B6  3EF6               	addlw	246
   607     00B7  00B3               	movwf	_units	;volatile
   608     00B8  0838               	movf	_voltage+1,w	;volatile
   609     00B9  1803               	skipnc
   610     00BA  3E01               	addlw	1
   611     00BB  3EFF               	addlw	255
   612     00BC  00B4               	movwf	_units+1	;volatile
   613                           
   614                           ;main.c: 64:                 GP1= 0;
   615     00BD  28C4               	goto	i1l892
   616     00BE                     i1l888:
   617                           
   618                           ;main.c: 65:             }else{
   619     00BE  01B5               	clrf	_tens	;volatile
   620     00BF  01B6               	clrf	_tens+1	;volatile
   621     00C0                     i1l890:
   622                           
   623                           ;main.c: 66:                 GP1= 1;
   624     00C0  0838               	movf	_voltage+1,w	;volatile
   625     00C1  00B4               	movwf	_units+1	;volatile
   626     00C2  0837               	movf	_voltage,w	;volatile
   627     00C3  00B3               	movwf	_units	;volatile
   628     00C4                     i1l892:
   629                           
   630                           ;main.c: 68:             if(units < 1){
   631     00C4  1003               	clrc
   632     00C5  0D35               	rlf	_tens,w	;volatile
   633     00C6  00B5               	movwf	_tens	;volatile
   634     00C7  0D36               	rlf	_tens+1,w	;volatile
   635     00C8  00B6               	movwf	_tens+1	;volatile
   636     00C9                     i1l894:
   637                           
   638                           ;main.c: 69:                 executeTens= 0;
   639     00C9  1003               	clrc
   640     00CA  0D33               	rlf	_units,w	;volatile
   641     00CB  00B3               	movwf	_units	;volatile
   642     00CC  0D34               	rlf	_units+1,w	;volatile
   643     00CD  00B4               	movwf	_units+1	;volatile
   644                           
   645                           ;main.c: 70:                 executeUnits= 0;
   646     00CE  291A               	goto	i1l928
   647     00CF                     i1l896:
   648     00CF  033A               	decf	_executeTens,w	;volatile
   649     00D0  1D03               	btfss	3,2
   650     00D1  28D3               	goto	u49_21
   651     00D2  28D4               	goto	u49_20
   652     00D3                     u49_21:
   653     00D3  28F4               	goto	i1l912
   654     00D4                     u49_20:
   655     00D4                     i1l898:
   656                           
   657                           ;main.c: 71:                 readAndDecide= 1;
   658     00D4  30FF               	movlw	255
   659     00D5  07B5               	addwf	_tens,f	;volatile
   660     00D6  1803               	skipnc
   661     00D7  0AB6               	incf	_tens+1,f	;volatile
   662     00D8  30FF               	movlw	255
   663     00D9  07B6               	addwf	_tens+1,f	;volatile
   664     00DA                     i1l900:
   665                           
   666                           ;main.c: 72:             }
   667     00DA  1085               	bcf	5,1	;volatile
   668     00DB                     i1l902:
   669                           
   670                           ;main.c: 73: 
   671     00DB  1C05               	btfss	5,0	;volatile
   672     00DC  28DE               	goto	u50_21
   673     00DD  28DF               	goto	u50_20
   674     00DE                     u50_21:
   675     00DE  28E1               	goto	i1l68
   676     00DF                     u50_20:
   677     00DF                     i1l904:
   678                           
   679                           ;main.c: 74:         }
   680     00DF  1005               	bcf	5,0	;volatile
   681                           
   682                           ;main.c: 75: 
   683     00E0  28E2               	goto	i1l906
   684     00E1                     i1l68:
   685                           
   686                           ;main.c: 76: 
   687     00E1  1405               	bsf	5,0	;volatile
   688     00E2                     i1l906:
   689                           
   690                           ;main.c: 78: 
   691     00E2  0836               	movf	_tens+1,w	;volatile
   692     00E3  3A80               	xorlw	128
   693     00E4  00DF               	movwf	btemp+1
   694     00E5  3080               	movlw	128
   695     00E6  025F               	subwf	btemp+1,w
   696     00E7  1D03               	skipz
   697     00E8  28EB               	goto	u51_25
   698     00E9  3001               	movlw	1
   699     00EA  0235               	subwf	_tens,w	;volatile
   700     00EB                     u51_25:
   701     00EB  1803               	skipnc
   702     00EC  28EE               	goto	u51_21
   703     00ED  28EF               	goto	u51_20
   704     00EE                     u51_21:
   705     00EE  291A               	goto	i1l928
   706     00EF                     u51_20:
   707     00EF                     i1l908:
   708                           
   709                           ;main.c: 79:     }
   710     00EF  1283               	bcf	3,5	;RP0=0, select bank0
   711     00F0  01BA               	clrf	_executeTens	;volatile
   712     00F1                     i1l910:
   713                           
   714                           ;main.c: 80: 
   715     00F1  3001               	movlw	1
   716     00F2  00B9               	movwf	_executeUnits	;volatile
   717     00F3  291A               	goto	i1l928
   718     00F4                     i1l912:
   719     00F4  0339               	decf	_executeUnits,w	;volatile
   720     00F5  1D03               	btfss	3,2
   721     00F6  28F8               	goto	u52_21
   722     00F7  28F9               	goto	u52_20
   723     00F8                     u52_21:
   724     00F8  291A               	goto	i1l66
   725     00F9                     u52_20:
   726     00F9                     i1l914:
   727                           
   728                           ;main.c: 84: 
   729     00F9  1005               	bcf	5,0	;volatile
   730     00FA                     i1l916:
   731                           
   732                           ;main.c: 85: 
   733     00FA  30FF               	movlw	255
   734     00FB  07B3               	addwf	_units,f	;volatile
   735     00FC  1803               	skipnc
   736     00FD  0AB4               	incf	_units+1,f	;volatile
   737     00FE  30FF               	movlw	255
   738     00FF  07B4               	addwf	_units+1,f	;volatile
   739     0100                     i1l918:
   740                           
   741                           ;main.c: 86: 
   742     0100  1C85               	btfss	5,1	;volatile
   743     0101  2903               	goto	u53_21
   744     0102  2904               	goto	u53_20
   745     0103                     u53_21:
   746     0103  2906               	goto	i1l73
   747     0104                     u53_20:
   748     0104                     i1l920:
   749                           
   750                           ;main.c: 87: void main(void) {
   751     0104  1085               	bcf	5,1	;volatile
   752                           
   753                           ;main.c: 88:     TRISIO = 0b010100;
   754     0105  2907               	goto	i1l922
   755     0106                     i1l73:
   756                           
   757                           ;main.c: 89:     CMCON = 7;
   758     0106  1485               	bsf	5,1	;volatile
   759     0107                     i1l922:
   760                           
   761                           ;main.c: 91:     ADCON0=0b10001001;
   762     0107  0834               	movf	_units+1,w	;volatile
   763     0108  3A80               	xorlw	128
   764     0109  00DF               	movwf	btemp+1
   765     010A  3080               	movlw	128
   766     010B  025F               	subwf	btemp+1,w
   767     010C  1D03               	skipz
   768     010D  2910               	goto	u54_25
   769     010E  3001               	movlw	1
   770     010F  0233               	subwf	_units,w	;volatile
   771     0110                     u54_25:
   772     0110  1803               	skipnc
   773     0111  2913               	goto	u54_21
   774     0112  2914               	goto	u54_20
   775     0113                     u54_21:
   776     0113  291A               	goto	i1l66
   777     0114                     u54_20:
   778     0114                     i1l924:
   779                           
   780                           ;main.c: 92: 
   781     0114  1283               	bcf	3,5	;RP0=0, select bank0
   782     0115  01BA               	clrf	_executeTens	;volatile
   783                           
   784                           ;main.c: 93:     ADON=1;
   785     0116  01B9               	clrf	_executeUnits	;volatile
   786     0117                     i1l926:
   787                           
   788                           ;main.c: 94:     WPU = 0X00;
   789     0117  3001               	movlw	1
   790     0118  00BE               	movwf	_readAndDecide	;volatile
   791     0119  291A               	goto	i1l928
   792     011A                     i1l66:
   793     011A                     i1l928:
   794                           
   795                           ;main.c: 104:     while(1)
   796     011A  110B               	bcf	11,2	;volatile
   797     011B                     i1l930:
   798                           
   799                           ;main.c: 105:     {
   800     011B  1283               	bcf	3,5	;RP0=0, select bank0
   801     011C  0181               	clrf	1	;volatile
   802     011D                     i1l76:
   803     011D  0830               	movf	??_isr+2,w
   804     011E  082F               	movf	??_isr+1,w
   805     011F  008A               	movwf	10
   806     0120  0E2E               	swapf	??_isr,w
   807     0121  0083               	movwf	3
   808     0122  0EDE               	swapf	btemp,f
   809     0123  0E5E               	swapf	btemp,w
   810     0124  0009               	retfie
   811     0125                     __end_of_isr:
   812                           
   813                           	psect	intentry
   814     0004                     __pintentry:	
   815                           ;incstack = 0
   816                           ; Regs used in _isr: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   817                           
   818     0004                     interrupt_function:
   819     005E                     saved_w	set	btemp
   820     0004  00DE               	movwf	btemp
   821     0005  0E03               	swapf	3,w
   822     0006  1283               	bcf	3,5	;RP0=0, select bank0
   823     0007  00AE               	movwf	??_isr
   824     0008  080A               	movf	10,w
   825     0009  00AF               	movwf	??_isr+1
   826     000A  085F               	movf	btemp+1,w
   827     000B  00B0               	movwf	??_isr+2
   828     000C  281D               	ljmp	_isr
   829                           
   830                           	psect	text2
   831     018D                     __ptext2:	
   832 ;; *************** function ___wmul *****************
   833 ;; Defined at:
   834 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
   835 ;; Parameters:    Size  Location     Type
   836 ;;  multiplier      2    0[BANK0 ] unsigned int 
   837 ;;  multiplicand    2    2[BANK0 ] unsigned int 
   838 ;; Auto vars:     Size  Location     Type
   839 ;;  product         2    4[BANK0 ] unsigned int 
   840 ;; Return value:  Size  Location     Type
   841 ;;                  2    0[BANK0 ] unsigned int 
   842 ;; Registers used:
   843 ;;		wreg, status,2, status,0
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMMON   BANK0
   849 ;;      Params:         0       4
   850 ;;      Locals:         0       2
   851 ;;      Temps:          0       0
   852 ;;      Totals:         0       6
   853 ;;Total ram usage:        6 bytes
   854 ;; Hardware stack levels used: 1
   855 ;; This function calls:
   856 ;;		Nothing
   857 ;; This function is called by:
   858 ;;		_isr
   859 ;; This function uses a non-reentrant model
   860 ;;
   861                           
   862     018D                     ___wmul:	
   863                           ;psect for function ___wmul
   864                           
   865     018D                     i1l784:	
   866                           ;incstack = 0
   867                           ; Regs used in ___wmul: [wreg+status,2+status,0]
   868                           
   869     018D  1283               	bcf	3,5	;RP0=0, select bank0
   870     018E  01A4               	clrf	___wmul@product
   871     018F  01A5               	clrf	___wmul@product+1
   872     0190                     i1l786:
   873     0190  1C20               	btfss	___wmul@multiplier,0
   874     0191  2993               	goto	u28_21
   875     0192  2994               	goto	u28_20
   876     0193                     u28_21:
   877     0193  299A               	goto	i1l170
   878     0194                     u28_20:
   879     0194                     i1l788:
   880     0194  0822               	movf	___wmul@multiplicand,w
   881     0195  07A4               	addwf	___wmul@product,f
   882     0196  1803               	skipnc
   883     0197  0AA5               	incf	___wmul@product+1,f
   884     0198  0823               	movf	___wmul@multiplicand+1,w
   885     0199  07A5               	addwf	___wmul@product+1,f
   886     019A                     i1l170:
   887     019A  3001               	movlw	1
   888     019B                     u29_25:
   889     019B  1003               	clrc
   890     019C  0DA2               	rlf	___wmul@multiplicand,f
   891     019D  0DA3               	rlf	___wmul@multiplicand+1,f
   892     019E  3EFF               	addlw	-1
   893     019F  1D03               	skipz
   894     01A0  299B               	goto	u29_25
   895     01A1                     i1l790:
   896     01A1  3001               	movlw	1
   897     01A2                     u30_25:
   898     01A2  1003               	clrc
   899     01A3  0CA1               	rrf	___wmul@multiplier+1,f
   900     01A4  0CA0               	rrf	___wmul@multiplier,f
   901     01A5  3EFF               	addlw	-1
   902     01A6  1D03               	skipz
   903     01A7  29A2               	goto	u30_25
   904     01A8                     i1l792:
   905     01A8  0820               	movf	___wmul@multiplier,w
   906     01A9  0421               	iorwf	___wmul@multiplier+1,w
   907     01AA  1D03               	btfss	3,2
   908     01AB  29AD               	goto	u31_21
   909     01AC  29AE               	goto	u31_20
   910     01AD                     u31_21:
   911     01AD  2990               	goto	i1l786
   912     01AE                     u31_20:
   913     01AE                     i1l794:
   914     01AE  0825               	movf	___wmul@product+1,w
   915     01AF  00A1               	movwf	?___wmul+1
   916     01B0  0824               	movf	___wmul@product,w
   917     01B1  00A0               	movwf	?___wmul
   918     01B2                     i1l172:
   919     01B2  0008               	return
   920     01B3                     __end_of___wmul:
   921                           
   922                           	psect	text3
   923     0125                     __ptext3:	
   924 ;; *************** function ___awdiv *****************
   925 ;; Defined at:
   926 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
   927 ;; Parameters:    Size  Location     Type
   928 ;;  divisor         2    6[BANK0 ] int 
   929 ;;  dividend        2    8[BANK0 ] int 
   930 ;; Auto vars:     Size  Location     Type
   931 ;;  quotient        2   12[BANK0 ] int 
   932 ;;  sign            1   11[BANK0 ] unsigned char 
   933 ;;  counter         1   10[BANK0 ] unsigned char 
   934 ;; Return value:  Size  Location     Type
   935 ;;                  2    6[BANK0 ] int 
   936 ;; Registers used:
   937 ;;		wreg, status,2, status,0, btemp+1
   938 ;; Tracked objects:
   939 ;;		On entry : 0/0
   940 ;;		On exit  : 0/0
   941 ;;		Unchanged: 0/0
   942 ;; Data sizes:     COMMON   BANK0
   943 ;;      Params:         0       4
   944 ;;      Locals:         0       4
   945 ;;      Temps:          0       0
   946 ;;      Totals:         0       8
   947 ;;Total ram usage:        8 bytes
   948 ;; Hardware stack levels used: 1
   949 ;; This function calls:
   950 ;;		Nothing
   951 ;; This function is called by:
   952 ;;		_isr
   953 ;; This function uses a non-reentrant model
   954 ;;
   955                           
   956     0125                     ___awdiv:	
   957                           ;psect for function ___awdiv
   958                           
   959     0125                     i1l798:	
   960                           ;incstack = 0
   961                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
   962                           
   963     0125  1283               	bcf	3,5	;RP0=0, select bank0
   964     0126  01AB               	clrf	___awdiv@sign
   965     0127                     i1l800:
   966     0127  1FA7               	btfss	___awdiv@divisor+1,7
   967     0128  292A               	goto	u32_21
   968     0129  292B               	goto	u32_20
   969     012A                     u32_21:
   970     012A  2932               	goto	i1l806
   971     012B                     u32_20:
   972     012B                     i1l802:
   973     012B  09A6               	comf	___awdiv@divisor,f
   974     012C  09A7               	comf	___awdiv@divisor+1,f
   975     012D  0AA6               	incf	___awdiv@divisor,f
   976     012E  1903               	skipnz
   977     012F  0AA7               	incf	___awdiv@divisor+1,f
   978     0130                     i1l804:
   979     0130  01AB               	clrf	___awdiv@sign
   980     0131  0AAB               	incf	___awdiv@sign,f
   981     0132                     i1l806:
   982     0132  1FA9               	btfss	___awdiv@dividend+1,7
   983     0133  2935               	goto	u33_21
   984     0134  2936               	goto	u33_20
   985     0135                     u33_21:
   986     0135  293F               	goto	i1l812
   987     0136                     u33_20:
   988     0136                     i1l808:
   989     0136  09A8               	comf	___awdiv@dividend,f
   990     0137  09A9               	comf	___awdiv@dividend+1,f
   991     0138  0AA8               	incf	___awdiv@dividend,f
   992     0139  1903               	skipnz
   993     013A  0AA9               	incf	___awdiv@dividend+1,f
   994     013B                     i1l810:
   995     013B  3001               	movlw	1
   996     013C  00DF               	movwf	btemp+1
   997     013D  085F               	movf	btemp+1,w
   998     013E  06AB               	xorwf	___awdiv@sign,f
   999     013F                     i1l812:
  1000     013F  01AC               	clrf	___awdiv@quotient
  1001     0140  01AD               	clrf	___awdiv@quotient+1
  1002     0141                     i1l814:
  1003     0141  0826               	movf	___awdiv@divisor,w
  1004     0142  0427               	iorwf	___awdiv@divisor+1,w
  1005     0143  1903               	btfsc	3,2
  1006     0144  2946               	goto	u34_21
  1007     0145  2947               	goto	u34_20
  1008     0146                     u34_21:
  1009     0146  297E               	goto	i1l834
  1010     0147                     u34_20:
  1011     0147                     i1l816:
  1012     0147  01AA               	clrf	___awdiv@counter
  1013     0148  0AAA               	incf	___awdiv@counter,f
  1014     0149  2955               	goto	i1l822
  1015     014A                     i1l818:
  1016     014A  3001               	movlw	1
  1017     014B                     u35_25:
  1018     014B  1003               	clrc
  1019     014C  0DA6               	rlf	___awdiv@divisor,f
  1020     014D  0DA7               	rlf	___awdiv@divisor+1,f
  1021     014E  3EFF               	addlw	-1
  1022     014F  1D03               	skipz
  1023     0150  294B               	goto	u35_25
  1024     0151                     i1l820:
  1025     0151  3001               	movlw	1
  1026     0152  00DF               	movwf	btemp+1
  1027     0153  085F               	movf	btemp+1,w
  1028     0154  07AA               	addwf	___awdiv@counter,f
  1029     0155                     i1l822:
  1030     0155  1FA7               	btfss	___awdiv@divisor+1,7
  1031     0156  2958               	goto	u36_21
  1032     0157  2959               	goto	u36_20
  1033     0158                     u36_21:
  1034     0158  294A               	goto	i1l818
  1035     0159                     u36_20:
  1036     0159                     i1l824:
  1037     0159  3001               	movlw	1
  1038     015A                     u37_25:
  1039     015A  1003               	clrc
  1040     015B  0DAC               	rlf	___awdiv@quotient,f
  1041     015C  0DAD               	rlf	___awdiv@quotient+1,f
  1042     015D  3EFF               	addlw	-1
  1043     015E  1D03               	skipz
  1044     015F  295A               	goto	u37_25
  1045     0160  0827               	movf	___awdiv@divisor+1,w
  1046     0161  0229               	subwf	___awdiv@dividend+1,w
  1047     0162  1D03               	skipz
  1048     0163  2966               	goto	u38_25
  1049     0164  0826               	movf	___awdiv@divisor,w
  1050     0165  0228               	subwf	___awdiv@dividend,w
  1051     0166                     u38_25:
  1052     0166  1C03               	skipc
  1053     0167  2969               	goto	u38_21
  1054     0168  296A               	goto	u38_20
  1055     0169                     u38_21:
  1056     0169  2971               	goto	i1l830
  1057     016A                     u38_20:
  1058     016A                     i1l826:
  1059     016A  0826               	movf	___awdiv@divisor,w
  1060     016B  02A8               	subwf	___awdiv@dividend,f
  1061     016C  0827               	movf	___awdiv@divisor+1,w
  1062     016D  1C03               	skipc
  1063     016E  03A9               	decf	___awdiv@dividend+1,f
  1064     016F  02A9               	subwf	___awdiv@dividend+1,f
  1065     0170                     i1l828:
  1066     0170  142C               	bsf	___awdiv@quotient,0
  1067     0171                     i1l830:
  1068     0171  3001               	movlw	1
  1069     0172                     u39_25:
  1070     0172  1003               	clrc
  1071     0173  0CA7               	rrf	___awdiv@divisor+1,f
  1072     0174  0CA6               	rrf	___awdiv@divisor,f
  1073     0175  3EFF               	addlw	-1
  1074     0176  1D03               	skipz
  1075     0177  2972               	goto	u39_25
  1076     0178                     i1l832:
  1077     0178  3001               	movlw	1
  1078     0179  02AA               	subwf	___awdiv@counter,f
  1079     017A  1D03               	btfss	3,2
  1080     017B  297D               	goto	u40_21
  1081     017C  297E               	goto	u40_20
  1082     017D                     u40_21:
  1083     017D  2959               	goto	i1l824
  1084     017E                     u40_20:
  1085     017E                     i1l834:
  1086     017E  082B               	movf	___awdiv@sign,w
  1087     017F  1903               	btfsc	3,2
  1088     0180  2982               	goto	u41_21
  1089     0181  2983               	goto	u41_20
  1090     0182                     u41_21:
  1091     0182  2988               	goto	i1l838
  1092     0183                     u41_20:
  1093     0183                     i1l836:
  1094     0183  09AC               	comf	___awdiv@quotient,f
  1095     0184  09AD               	comf	___awdiv@quotient+1,f
  1096     0185  0AAC               	incf	___awdiv@quotient,f
  1097     0186  1903               	skipnz
  1098     0187  0AAD               	incf	___awdiv@quotient+1,f
  1099     0188                     i1l838:
  1100     0188  082D               	movf	___awdiv@quotient+1,w
  1101     0189  00A7               	movwf	?___awdiv+1
  1102     018A  082C               	movf	___awdiv@quotient,w
  1103     018B  00A6               	movwf	?___awdiv
  1104     018C                     i1l323:
  1105     018C  0008               	return
  1106     018D                     __end_of___awdiv:
  1107     005E                     btemp	set	94	;btemp
  1108     005E                     wtemp0	set	94
  1109                           
  1110                           	psect	config
  1111                           
  1112                           ;Config register CONFIG @ 0x2007
  1113                           ;	Oscillator Selection bits
  1114                           ;	FOSC = INTRCIO, INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function o
      +                          n GP5/OSC1/CLKIN
  1115                           ;	Watchdog Timer Enable bit
  1116                           ;	WDTE = OFF, WDT disabled
  1117                           ;	Power-Up Timer Enable bit
  1118                           ;	PWRTE = ON, PWRT enabled
  1119                           ;	GP3/MCLR pin function select
  1120                           ;	MCLRE = OFF, GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD
  1121                           ;	Brown-out Detect Enable bit
  1122                           ;	BOREN = OFF, BOD disabled
  1123                           ;	Code Protection bit
  1124                           ;	CP = OFF, Program Memory code protection is disabled
  1125                           ;	Data Code Protection bit
  1126                           ;	CPD = OFF, Data memory code protection is disabled
  1127     2007                     	org	8199
  1128     2007  3184               	dw	12676

Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     19      31

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->___awdiv
    ___awdiv->___wmul

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _isr                                                  5     5      0     871
                                             14 BANK0      5     5      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     396
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _isr (ROOT)
   ___awdiv
     ___wmul (ARG)
   ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               3E     13      1F       4       50.0%
BITBANK0            3E      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      1F       6        0.0%
ABS                  0      0      1F       5        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Sun Jan 19 18:38:35 2025

                     l81 01CB                       l82 01CB             ___awdiv@sign 002B  
    ___wmul@multiplicand 0022                      l932 01B3                      l934 01BF  
                    l936 01C0                      l938 01C2                      _GP0 0028  
                    _GP1 0029                      _WPU 0095                      _isr 001D  
                   ?_isr 0020                     _ADON 00F8                     i1l55 0032  
                   i1l73 0106                     i1l66 011A                     i1l76 011D  
                   i1l68 00E1                     _TMR0 0001                     _main 01B3  
                   _tens 0035                     btemp 005E                     start 000D  
                  ??_isr 002E                    ?_main 0020          __end_of___awdiv 018D  
                  _CMCON 0019                    _ANSEL 009F          ___awdiv@divisor 0026  
                  i1l170 019A                    i1l323 018C                    i1l172 01B2  
                  i1l800 0127                    i1l810 013B                    i1l802 012B  
                  i1l820 0151                    i1l812 013F                    i1l804 0130  
                  i1l900 00DA                    i1l830 0171                    i1l822 0155  
                  i1l814 0141                    i1l806 0132                    i1l910 00F1  
                  i1l902 00DB                    i1l832 0178                    i1l824 0159  
                  i1l816 0147                    i1l808 0136                    i1l920 0104  
                  i1l904 00DF                    i1l912 00F4                    i1l826 016A  
                  i1l818 014A                    i1l834 017E                    i1l930 011B  
                  i1l922 0107                    i1l914 00F9                    i1l906 00E2  
                  i1l850 002D                    i1l842 001D                    i1l836 0183  
                  i1l828 0170                    i1l924 0114                    i1l916 00FA  
                  i1l908 00EF                    i1l860 003C                    i1l852 002E  
                  i1l844 0021                    i1l838 0188                    i1l790 01A1  
                  i1l926 0117                    i1l918 0100                    i1l870 007C  
                  i1l862 0054                    i1l854 0030                    i1l846 0027  
                  i1l792 01A8                    i1l784 018D                    i1l880 009F  
                  i1l872 0085                    i1l864 0066                    i1l856 0031  
                  i1l848 0028                    i1l928 011A                    i1l794 01AE  
                  i1l786 0190                    i1l890 00C0                    i1l882 00A8  
                  i1l874 0089                    i1l866 006F                    i1l858 0036  
                  i1l788 0194                    i1l884 00B1                    i1l876 0092  
                  i1l892 00C4                    i1l868 0073                    i1l798 0125  
                  i1l894 00C9                    i1l886 00B5                    i1l878 009B  
                  i1l888 00BE                    i1l896 00CF                    i1l898 00D4  
        ___awdiv@counter 002A                    u30_25 01A2                    u31_20 01AE  
                  u31_21 01AD                    u40_20 017E                    u32_20 012B  
                  u40_21 017D                    u32_21 012A                    u41_20 0183  
                  u33_20 0136                    u41_21 0182                    u33_21 0135  
                  u34_20 0147                    u50_20 00DF                    u42_20 0027  
                  u34_21 0146                    u50_21 00DE                    u42_21 0026  
                  u51_20 00EF                    u43_20 002D                    u51_21 00EE  
                  u43_21 002C                    u35_25 014B                    u51_25 00EB  
                  u36_20 0159                    u28_20 0194                    u52_20 00F9  
                  u44_20 0036                    u36_21 0158                    u28_21 0193  
                  u52_21 00F8                    u44_21 0035                    u53_20 0104  
                  u45_20 006F                    u53_21 0103                    u45_21 006E  
                  u37_25 015A                    u29_25 019B                    u38_20 016A  
                  u54_20 0114                    u46_20 0085                    u38_21 0169  
                  u54_21 0113                    u46_21 0084                    u38_25 0166  
                  u54_25 0110                    u47_20 009B                    u47_21 009A  
                  u39_25 0172                    u48_20 00B1                    u48_21 00B0  
                  u49_20 00D4                    u49_21 00D3                    _units 0033  
                  pclath 000A                    status 0003                    wtemp0 005E  
        __initialization 000E             __end_of_main 01CD                   ??_main 0000  
                 _ADCON0 001F                   _ADRESH 001E                   _ADRESL 009E  
       ___awdiv@dividend 0028                   _INTCON 000B                   _OSCCAL 0090  
                 _TMR0IF 005A                   _TRISIO 0085            _readAndDecide 003E  
                 ___wmul 018D                ??___awdiv 0000         ___awdiv@quotient 002C  
                 saved_w 005E  __end_of__initialization 001B           __pcstackCOMMON 0000  
           __pidataBANK0 01CD               __pbssBANK0 0033               __pmaintext 01B3  
                ?___wmul 0020               __pintentry 0004                  ___awdiv 0125  
                _isr$653 0031                  __ptext1 001D                  __ptext2 018D  
                __ptext3 0125                  _counter 003B                  _reading 003C  
                _voltage 0037     end_of_initialization 001B           __end_of___wmul 01B3  
    start_initialization 000E              __end_of_isr 0125                 ??___wmul 0000  
            __pdataBANK0 003E                ___latbits 0000            __pcstackBANK0 0020  
           _executeUnits 0039                 ?___awdiv 0026        interrupt_function 0004  
         ___wmul@product 0024                 _GO_nDONE 00F9        ___wmul@multiplier 0020  
            _executeTens 003A                 intlevel1 0000               _OPTION_REG 0081  
